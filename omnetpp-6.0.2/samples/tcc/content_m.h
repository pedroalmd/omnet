//
// Generated file, do not edit! Created by opp_msgtool 6.0 from content.msg.
//

#ifndef __CONTENT_M_H
#define __CONTENT_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class ContentMsg;
/**
 * Class generated from <tt>content.msg:2</tt> by opp_msgtool.
 * <pre>
 * message ContentMsg
 * {
 *     int source_num;
 *     char source_type;
 *     int destination;
 *     int hopCount = 0;
 *     char content;
 *     int tcp_type;
 * }
 * </pre>
 */
class ContentMsg : public ::omnetpp::cMessage
{
  protected:
    int source_num = 0;
    char source_type = 0;
    int destination = 0;
    int hopCount = 0;
    char content = 0;
    int tcp_type = 0;

  private:
    void copy(const ContentMsg& other);

  protected:
    bool operator==(const ContentMsg&) = delete;

  public:
    ContentMsg(const char *name=nullptr, short kind=0);
    ContentMsg(const ContentMsg& other);
    virtual ~ContentMsg();
    ContentMsg& operator=(const ContentMsg& other);
    virtual ContentMsg *dup() const override {return new ContentMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSource_num() const;
    virtual void setSource_num(int source_num);

    virtual char getSource_type() const;
    virtual void setSource_type(char source_type);

    virtual int getDestination() const;
    virtual void setDestination(int destination);

    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);

    virtual char getContent() const;
    virtual void setContent(char content);

    virtual int getTcp_type() const;
    virtual void setTcp_type(int tcp_type);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ContentMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ContentMsg& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline ContentMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<ContentMsg*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __CONTENT_M_H

